package udistrital.avanzada.taller.vista;

import java.io.File;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * Panel encargado de la interfaz de carga de archivos de propiedades
 * (.properties) para magos y hechizos dentro del juego <b>ConjurosConHilos</b>.
 *
 * <p>
 * Este panel forma parte de la capa de vista (MVC) y se comunica con el
 * {@link udistrital.avanzada.taller.control.ControlInterfaz} mediante listeners
 * registrados sobre sus botones.
 * </p>
 *
 * <p>
 * Permite al usuario:
 * <ul>
 * <li>Cargar el archivo de hechizos.</li>
 * <li>Cargar el archivo de magos.</li>
 * <li>Iniciar el juego (una vez que ambos estén cargados).</li>
 * <li>Salir del programa.</li>
 * </ul>
 * </p>
 *
 * <p>
 * La carga de archivos se realiza a través de un {@link JFileChooser} con un
 * filtro específico para archivos <code>.properties</code>.
 * </p>
 *
 * @author Paula Martínez
 * @version 1.0
 * @since 2025-10-27
 */
public class PanelCargar extends PanelBase {

    /**
     * Crea el panel y sus componentes visuales.
     * <p>
     * Este constructor invoca el método {@link #initComponents()}, que es
     * generado automáticamente por el diseñador de interfaces (GUI Builder) de
     * NetBeans. No debe modificarse manualmente.
     * </p>
     */
    public PanelCargar() {
        initComponents();
    }

    // ==============================================================
    //   MÉTODOS DE ACCESO A LOS BOTONES (para uso del controlador)
    // ==============================================================
    /**
     * Devuelve la referencia al botón <strong>SALIR</strong> para que el
     * controlador pueda registrar su listener y manejar el cierre de la
     * aplicación.
     *
     * @return la instancia del botón de salida
     */
    public JButton getBotonSalir() {
        return botonSalir;
    }

    /**
     * Devuelve la referencia al botón <strong>JUGAR</strong> para que el
     * controlador pueda registrar su listener y continuar al siguiente paso del
     * flujo (p. ej., carga de datos o pantalla de duelo).
     *
     * @return la instancia del botón de inicio/juego
     */
    public JButton getBotonJugar() {
        return botonJugar;
    }

    /**
     * Devuelve la referencia al botón <strong>Cargar Magos</strong> para que el
     * controlador pueda registrar su listener y manejar la carga del archivo de
     * propiedades correspondiente.
     *
     * @return la instancia del botón de carga de magos
     */
    public JButton getBotonCargarMagos() {
        return botonCargarMagos;
    }

    /**
     * Devuelve la referencia al botón <strong>Cargar Hechizos</strong> para que
     * el controlador pueda registrar su listener y manejar la carga del archivo
     * de propiedades correspondiente.
     *
     * @return la instancia del botón de carga de hechizos
     */
    public JButton getBotonCargarHechizos() {
        return botonCargarHechizos;
    }

    /**
     * Abre un cuadro de diálogo para seleccionar un archivo de propiedades.
     * <p>
     * Este método utiliza {@link JFileChooser} para que el usuario seleccione
     * un archivo con extensión <code>.properties</code>. Retorna la ruta
     * absoluta del archivo seleccionado o {@code null} si el usuario cancela la
     * operación.
     * </p>
     *
     * @param descripcion texto descriptivo que se muestra en el título del
     * cuadro de diálogo (por ejemplo "hechizos" o "magos")
     * @return la ruta absoluta del archivo seleccionado, o {@code null} si no
     * se selecciona ninguno
     */
    public String cargarProperties(String descripcion) {
        // Se crea el selector de archivos, iniciando en el directorio de trabajo actual.
        JFileChooser chooser = new JFileChooser(System.getProperty("user.dir"));

        // Se configura el título y el filtro de extensión
        chooser.setDialogTitle("Seleccionar archivo de " + descripcion);
        chooser.setFileFilter(new FileNameExtensionFilter(
                "Archivos de propiedades (*.properties)", "properties"));

        // Se muestra el diálogo y se obtiene el resultado
        int resultado = chooser.showOpenDialog(null);

        // Si el usuario confirma la selección, se devuelve la ruta absoluta
        if (resultado == JFileChooser.APPROVE_OPTION) {
            File archivo = chooser.getSelectedFile();
            return archivo.getAbsolutePath();
        }

        // Si cancela o cierra, retorna null
        return null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lTitulo = new javax.swing.JLabel();
        botonCargarHechizos = new javax.swing.JButton();
        botonCargarMagos = new javax.swing.JButton();
        botonJugar = new javax.swing.JButton();
        botonSalir = new javax.swing.JButton();

        lTitulo.setFont(new java.awt.Font("Monospaced", 1, 60)); // NOI18N
        lTitulo.setForeground(new java.awt.Color(255, 255, 255));
        lTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lTitulo.setText("Cargar Propiedades");

        botonCargarHechizos.setBackground(new java.awt.Color(132, 72, 62));
        botonCargarHechizos.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        botonCargarHechizos.setForeground(new java.awt.Color(0, 0, 0));
        botonCargarHechizos.setText("Cargar Hechizos");
        botonCargarHechizos.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(0, 0, 0), null, null));

        botonCargarMagos.setBackground(new java.awt.Color(132, 72, 62));
        botonCargarMagos.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        botonCargarMagos.setForeground(new java.awt.Color(0, 0, 0));
        botonCargarMagos.setText("Cargar Magos");
        botonCargarMagos.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(0, 0, 0), null, null));

        botonJugar.setBackground(new java.awt.Color(132, 72, 62));
        botonJugar.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        botonJugar.setForeground(new java.awt.Color(0, 0, 0));
        botonJugar.setText("JUGAR");
        botonJugar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(0, 0, 0), null, null));

        botonSalir.setBackground(new java.awt.Color(132, 72, 62));
        botonSalir.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        botonSalir.setForeground(new java.awt.Color(153, 0, 0));
        botonSalir.setText("SALIR");
        botonSalir.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(0, 0, 0), null, null));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(482, 482, 482)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonCargarMagos, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonCargarHechizos, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonJugar, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(487, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(lTitulo)
                .addGap(92, 92, 92)
                .addComponent(botonCargarHechizos, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(botonCargarMagos, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(botonJugar, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(botonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(213, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonCargarHechizos;
    private javax.swing.JButton botonCargarMagos;
    private javax.swing.JButton botonJugar;
    private javax.swing.JButton botonSalir;
    private javax.swing.JLabel lTitulo;
    // End of variables declaration//GEN-END:variables
}
